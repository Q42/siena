h1(#relation-syntax-one). Using the new syntax @One<T>@

bq.. This is a new syntax to represent:
- the owner in an owned relation (one2many or one2one)
- the aggregator in an aggregated relation

p. When using @One<T>@:
* *Siena DO*
- _manage the relation_ but not the related entities
- _manage_ the owner or aggregator reference_ even if you change or delete the relation. 
- _auto-insert the related entity_ at the same time as the parent if not done yet.
- _lazy-load the related entity_ only when required.
- _delete-cascade the aggregated entities_ because an aggregated entity can't exist outside its aggregator. *This is the ONLY accepted delete cascade*. 

* *Siena DOESN'T*
- _manage the updates on the related entity_. You must save it yourself.
- _delete the owned entities when you delete the owner_ since an owned entity can change owner

h2(#relation-syntax-one-owner). @One<T>@ in an owned relation

p. Here is the owner model:

bc.. public class OwnerModel {
...
	@Owned(mappingBy="owner")
	public One<ChildModel> child;	
...
}

p. Here is the child model:

bc.. public class ChildModel {
...
	public OwnerModel owner;	
...
}

p. *Note* On the child side, the _owner_ field is just written as a simple reference to the owner without any @One<T>@. Why? because, on the owned entity side, the owner is just referenced by its id/key.

p. Using the old notation @Query<T>@, the @One<T>@ is equivalent to:

bc.. public class OwnerModel {
...
	@Filter("owner")
	public Query<ChildModel> child;	
...
}

p. Yet, you should take care of the unicity of the child by yourself.

h2(#relation-syntax-one-aggregate). @One<T>@ in an aggregated relation

p. Here is the aggregator model:

bc.. public class AggregatorModel {
...
	@Aggregated
	public One<ChildModel> child;	
...
}

p. Here is the aggregated model:

bc.. public class AggregatedModel {
...
...
}

p. On the aggregated side, there is no reference to the aggregator because an aggregated entity shall not be aware of its aggregator: it's a part of it but it was meant to be. 
It's very useful because you don't need to foresee your model will be aggregated while designing it and you can aggregate any model.
 
bq. The aggregator reference is managed by Siena itself and you don't have to deal with it neither declare it in your model.

p(note). **Note** Nevertheless, if you absolutely want to access your own aggregator, it's possible. Go to the "aggregated relation page":./relation_aggregated.html.

h2(#relation-syntax-one-code). Using One<T> in your code

bq. The 2 importants functions of @One<T>@ are @set(T obj)@ and @get()@

h3(#relation-syntax-one-code-insert). Inserting parent+child with @set(T obj)@

bc.. Dog pluto = new Dog("Pluto");
		
Person tom = new Person("Tom");
tom.dog.set(pluto);
tom.save(); // or insert, it's exactly the same behavior
		

p(note). *Note* You don't have to insert the child object as Siena inserts it at the same time as the parent if the child was not already inserted.

h3(#relation-syntax-one-code-get). Retrieving the child from parent with @get()@

bc.. Person tom = Person.getByName("Tom");
Dog pluto = tom.dog.get();
		
p(note). *Note* tom.dog is a @One<Dog>@ so you need to use	@get()@ to access the real object

h3(#relation-syntax-one-code-update). Updating a field in child and saving is MANUAL

bc.. Person tom = Person.getByName("Tom");
Dog pluto = tom.dog.get();
pluto.name = "Pluto2";
pluto.save();

tom.save(); // DOESN'T SAVE CHILD PLUTO 




